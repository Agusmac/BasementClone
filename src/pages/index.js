// 'use client';
import Head from 'next/head'
import Hero from '../../components/hero/Hero'
import Navbar from '../../components/hero/Navbar'
import { useEffect, useRef, useState } from 'react'
import Marquee from '../../components/Marquee'
import Slider from '../../components/Slider'
import PinnedText from '../../components/pinned/PinnedText'
import AwardsDiv from '../../components/awards/AwardsDiv'
import LastSlider from '../../components/LastSlider'
import Footer from '../../components/Footer'
import { gsap } from "gsap/dist/gsap";
import Image from 'next/image'
import Scenario from '../../components/Scenario'
import Loader from '../../components/Loader'


export default function Home() {

  const darkDivRef = useRef()
  const testRef = useRef()
  const [awardVisible, setAwardVisible] = useState(false)
  const [currentAward, setCurrentAward] = useState(1)
  const [isMobile, setisMobile] = useState(true)
  const [heroModelReady, setHeroModelReady] = useState(false)


  // const [crossVisible, setcrossVisible] = useState(false)

  useEffect(() => {
    //  probably should check for window size and remove this if mobile
    (
      async () => {
        const LocomotiveScroll = (await import('locomotive-scroll')).default
        const locomotiveScroll = new LocomotiveScroll();
      }
    )()
  }, [])

  useEffect(() => {

    if (window.innerWidth > 641) {
      console.log('FOLLOWER ON')
      setisMobile(false)
      let start = true;
      gsap.set(".award", { xPercent: -50, yPercent: -50 });
      let xAwardSetter = gsap.quickTo(".award", "x", { duration: 0.4, ease: "power3.out" })
      let yAwardSetter = gsap.quickTo(".award", "y", { duration: 0.4, ease: "power3.out" })

      gsap.set(".follower", { xPercent: -50, yPercent: -50 });
      let xSetter = gsap.quickSetter(".follower", "x", "px",)
      let ySetter = gsap.quickSetter(".follower", "y", "px",)

      window.addEventListener("mousemove", e => {
        xAwardSetter(e.x)
        yAwardSetter(e.y)
        xSetter(e.x)
        ySetter(e.y)
        if (start) {
          gsap.to('.crosshair', {
            opacity: 1,
            duration: 0.5,
            ease: 'power2.out',
          })
          start = false
        }
      });
    }

  }, []);


  return (
    <>
      <Head>
        <title>Basement By Agus Mac Rae</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        {/* PROBABLY move to a component, and add a res check */}
        {/* {window.innerWidth < 641 && */}

        <div className='hidden sm:block'>
          <div className="follower mix-blend-difference">
            <Image priority className="crosshair z-50 relative opacity-0" src="/crosshair.svg" alt='titleImg' width={66} height={66} quality={100} />
            <div className='absolute inset-0 grid place-content-center'><div className='crosshair-dot h-1 w-1'></div></div>
          </div>
          <div className="award grid place-content-center">
            <div className={`opacity-0 ${awardVisible && "opacity-100"} duration-300 ease-in-out`}>
              <div className='w-[35vw] h-[35vw] lg:w-[20vw] lg:h-[20vw]'>
                {!isMobile && <Scenario currentAward={currentAward} />}
              </div>
            </div>
          </div>
        </div>

        <Loader heroModelReady={heroModelReady}/>
        {/* } */}


        <Navbar />
        <Hero darkDivRef={darkDivRef} testRef={testRef} setHeroModelReady={setHeroModelReady}/>

        <div className='bg-black relative pt-2 z-20'>
          <div ref={darkDivRef} className='pt-16 sm:pt-[114px] bg-black'>
            <p className='text-white uppercase mx-auto text-center text-xs sm:text-xl font-medium px-4'>
              Sometimes size doesn&apos;t matter. we work for BIG &
              <br className='sm:hidden' /> SMALL NON-stoppable visionarIES.
              <br /> There&apos;s love for them all.
            </p>
            <Marquee />
            <Slider />
          </div>
          <div className='relative sm:-top-80 md:-top-96 xl:-top-64 '>
            <PinnedText />
          </div>
        </div>
        <AwardsDiv setAwardVisible={setAwardVisible} setCurrentAward={setCurrentAward} />
        <LastSlider />
        <Footer />
  
      </main>
    </>
  )
}
// #000e